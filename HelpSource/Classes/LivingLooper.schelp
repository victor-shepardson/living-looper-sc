class:: LivingLooper
summary:: A squishy multichannel quasi-looper based on the RAVE autoencoder.
related:: RAVE
categories:: UGens

description::
LivingLooper plugin for SuperCollider.

note::
must use server hardwareBufferSize equal to the RAVE model (typically 2048) for good performance.
::

note::
must use server sampleRate equal to the RAVE model (typically 48000) for correct pitch.
::

note::
Synth creation will glitch the audio the first time a particular .ts file is used, as the torchscript module is loaded on the audio thread.
::

note::
code::
// if macOS complains about unknown binaries:
("xattr -d -r com.apple.quarantine"+Platform.userExtensionDir.quote++"/LivingLooper/").runInTerminal
::
::

method::new

argument::filename
String, path to torchscript file containing a LivingLooper.

argument::loops
Integer, should match the number in the torchscript file.

argument::input
Audio input

argument::loop
Loop index control signal. 0 for no loop.

examples::

code::
(
// make sure the server can actually boot with the right sampleRate!
// Server.default.options.inDevice_("BlackHole 16ch");
// Server.default.options.outDevice_("BlackHole 16ch");
// Server.default.options.inDevice_("Built-in Microph");
// Server.default.options.outDevice_("Built-in Output");

s.options.sampleRate = 48000; // the sample rate must match RAVE
s.options.blockSize = 512;//16; // a low block size within scsynth is fine,
s.options.hardwareBufferSize = 2048; // but the hardware buffer size needs to match RAVE
// (to avoid dropouts)

"OMP_NUM_THREADS".setenv("1"); // this saves a lot of CPU on arm macs, at least

s.waitForBoot{
	~bus = Bus.new(index:0, numChannels:2);
}
)

// run this block to start the looper
(
MIDIIn.connectAll;

// MIDI program change 0-5
MIDIdef.program(\ll_midi_pc, { arg val, chan, src;
	~synth.set(\loop, val)
});

// or notes 60-64
MIDIdef.noteOn(\ll_midi_on, { arg val, num, chan, src;
	~synth.set(\loop, (num - 59))
});
MIDIdef.noteOff(\ll_midi_off, { arg val, num, chan, src;
	~synth.set(\loop, 0)
});

~synth = {
	var in = (SoundIn.ar(0)*2).softclip;
    var out =
       LivingLooper.new(
			thisProcess.nowExecutingPath.dirname+/+"ll_test.ts", 5,
			in,
            \loop.kr(0), // loop index
		);
	out = (2*out).softclip;
	out = Splay.ar(out);//+Splay.ar(in);
	out

}.play(outbus:~bus);
)

::