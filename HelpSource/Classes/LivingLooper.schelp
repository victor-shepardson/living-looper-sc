class:: LivingLooper
summary:: A squishy multichannel quasi-looper based on the RAVE autoencoder.
related:: LLGUI
categories:: UGens

description::
Core LivingLooper plugin for SuperCollider.

note::
code::
// if macOS complains about unknown binaries:
("/usr/bin/xattr -d -r com.apple.quarantine"+Platform.userExtensionDir.quote++"/LivingLooper/").runInTerminal
::
::

method::new

argument::filename
String, path to torchscript file containing a LivingLooper.

argument::loop
Loop index control signal. 0 for no loop. Positive integer to record a loop. Negative integer to erase a loop.

argument::thru
Thru control signal; 0 or 1 controls whether you hear processed input while recording a loop.

argument::auto
Auto mode control signal. 0 for manual control with the loop signal, 1 for automatic loop switching in response to input audio.

examples::

with GUI:

code::

(

Server.scsynth;
// Server.supernova;

s.options.numInputBusChannels = 2;
s.options.numOutputBusChannels = 2;
s.options.sampleRate = 48000;//44100 // best sound if the sample rate matches RAVE
s.options.blockSize = 128;
s.options.hardwareBufferSize = 128;
s.options.numWireBufs = 256;

"OMP_NUM_THREADS".setenv("1"); // this saves a lot of CPU on arm macs, at least

// RUN THIS the firs time if you have downloaded the mac version from github:
// ("xattr -d -r com.apple.quarantine"+Platform.userExtensionDir.quote++"/LivingLooper/").runInTerminal;

s.waitForBoot{
	~bus = Bus.new(index:0, numChannels:2);
}
)

(

// example MIDI for Softstep 2 controller (note mode):
MIDIIn.connectAll;

MIDIdef.program(\softstep, { arg val, chan, src;
	~synth.set(\loop, val)
});

// top row = erase
// pad 5 = auto
MIDIdef.noteOn(\softstep_on, { arg val, num, chan, src;
	var idx = num-60;
	var row = (idx/5).floor;

	(idx==4).if{
		\auto.postln;
		~synth.set(\auto, 1);
	}{
		idx = idx%5+1;
		(row==1).if{
			idx = idx * (-1);
			[\erase, idx].postln;
			~synth.set(\loop, idx);
		}{
			[\record, idx].postln;
			~synth.set(\loop, idx, \auto, 0);
		}
	}
});

MIDIdef.noteOff(\softstep_off, { arg val, num, chan, src;
	~synth.set(\loop, 0)
});

//// make a living looper

// make an LLGUI, which infers nLoops and nLatent from the filename
~ll = LLGUI(Platform.userExtensionDir++"/LivingLooper/ll_gtr48lr_l4_z26.ts");

// use .ar on the LLGUI *instance* to make a LivingLooper Ugen
~synth = {
	var in = SoundIn.ar(0);
	var out = ~ll.ar(Mix.new(in));
	out.postln;
	out = Splay.ar(out);
	// out = Splay.ar(out)+Splay.ar(in);
	out

}.play(outbus:~bus); //and make an synth

// now associate the LLGUI with the specific synth which it can control
~ll.map(~synth);

)

::